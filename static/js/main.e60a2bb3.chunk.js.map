{"version":3,"sources":["util/orders.ts","contexts/OrderBook.tsx","util/format.ts","components/OrderRows.tsx","components/OrderBookTableControls.tsx","components/OrderBookTable.tsx","App.tsx","theme.ts","index.tsx"],"names":["orderTupleToObject","o","price","quantity","OrderBookContext","createContext","undefined","useOrderBookContext","val","useContext","Error","OrderBookProvider","children","ws","useRef","useState","isConnecting","setIsConnecting","isConnected","setIsConnected","product","setProduct","asks","bids","orderBook","setOrderBook","groupedOrderBook","setGroupedOrderBook","groupSize","setGroupSize","connectionTries","setConnectionTries","send","useCallback","data","current","readyState","OPEN","JSON","stringify","useEffect","WebSocket","addEventListener","close","reconnect","t","event","feed","product_ids","onMessage","ev","parse","prevOrders","book","update","newBook","forEach","orderType","map","filter","order","index","arr","findIndex","addOrderUpdateToBook","err","console","error","removeEventListener","groupedBook","priceGroups","reduce","prev","groupedPrice","Object","entries","parseFloat","groupOrderBookPrices","value","useMemo","Provider","commafy","str","toString","replace","OrderRows","orders","styles","useStyles","sortedOrders","sliced","sort","a","b","slice","reverse","quantityCounter","TableRow","className","row","TableCell","length","colSpan","makeStyles","color","green","red","background","fontWeight","GROUP_SIZES","OrderBookTableControls","groupSizeIndex","indexOf","spread","lo","Math","min","Infinity","hi","max","cell","section","ButtonBase","disabled","groupButton","onClick","theme","display","alignItems","palette","text","secondary","paddingRight","spacing","marginRight","minWidth","justifyContent","width","height","borderRadius","fontSize","OrderBookTable","content","Box","CircularProgress","Table","TableHead","TableBody","flexDirection","Typography","variant","m","Button","mb","TableContainer","component","Paper","App","app","inner","minHeight","padding","maxWidth","createMuiTheme","type","typography","fontFamily","overrides","MuiCssBaseline","fontStyle","fontDisplay","src","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.e60a2bb3.chunk.js","sourcesContent":["import {\n  OrderBookOrderTuple,\n  OrderBookOrder,\n  OrderBookUpdate,\n  OrderBook,\n} from \"../types/orders\";\n\nexport function orderTupleToObject(o: OrderBookOrderTuple): OrderBookOrder {\n  return {\n    price: o[0],\n    quantity: o[1],\n  };\n}\n\n/**\n * Non-mutative operation to add orders from an incoming update to an order book.\n */\nexport function addOrderUpdateToBook(\n  book: OrderBook,\n  update: OrderBookUpdate\n): OrderBook {\n  const newBook = { ...book };\n\n  // Identical operations on asks and bids\n  ([\"asks\", \"bids\"] as const).forEach((orderType) => {\n    newBook[orderType] = [\n      ...update[orderType].map(orderTupleToObject),\n      ...newBook[orderType],\n    ].filter((order, index, arr) => {\n      // Remove entries with no quanity\n      if (!order.quantity) {\n        return false;\n      }\n\n      // De-duplicate order entries with identical prices. The earlier in the\n      // array, the more recent.\n      return index === arr.findIndex((o) => o.price === order.price);\n    });\n  });\n\n  return newBook;\n}\n\n/**\n * Non-mutative operation to lump order book prices into groups\n */\nexport function groupOrderBookPrices(book: OrderBook, groupSize: number): OrderBook {\n  const groupedBook: OrderBook = { asks: [], bids: [] };\n\n  ([\"asks\", \"bids\"] as const).forEach((orderType) => {\n    // Group into a dict of price -> quantity\n    const priceGroups = book[orderType].reduce((prev, o) => {\n      // Round up for asks, down for bids\n      const groupedPrice = o.price - (o.price % groupSize) + (orderType === \"asks\" ? groupSize : 0);\n      if (prev[groupedPrice] === undefined) {\n        prev[groupedPrice] = 0;\n      }\n      prev[groupedPrice] += o.quantity;\n      return prev;\n    }, {} as Record<string, number>)\n\n    // Convert back into an array\n    groupedBook[orderType] = Object.entries(priceGroups).map(([price, quantity]) => ({\n      price: parseFloat(price),\n      quantity,\n    }));\n  });\n\n  return groupedBook;\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { OrderBook, OrderBookUpdate } from \"../types/orders\";\nimport { addOrderUpdateToBook, groupOrderBookPrices } from \"../util/orders\";\n\ninterface OrderBookState {\n  isConnecting: boolean;\n  isConnected: boolean;\n  orderBook: OrderBook;\n  product: string;\n  groupSize: number;\n  reconnect(): void;\n  setProduct(product: string): void;\n  setGroupSize(groupSize: number): void;\n}\n\nconst OrderBookContext = createContext<OrderBookState | undefined>(undefined);\n\n/**\n * Convenience hook that ensures the context has been set.\n */\nexport const useOrderBookContext = () => {\n  const val = useContext(OrderBookContext);\n  if (!val) {\n    throw new Error(\n      `Context provider not found, make sure you include <OrderBookContext> above this component!`\n    );\n  }\n  return val;\n};\n\nexport const OrderBookProvider: React.FC = ({ children }) => {\n  const ws = useRef<WebSocket | undefined>();\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [isConnected, setIsConnected] = useState(false);\n  const [product, setProduct] = useState(\"PI_XBTUSD\");\n  const [orderBook, setOrderBook] = useState<OrderBookState[\"orderBook\"]>({\n    asks: [],\n    bids: [],\n  });\n  const [groupedOrderBook, setGroupedOrderBook] = useState<\n    OrderBookState[\"orderBook\"]\n  >(orderBook);\n  const [groupSize, setGroupSize] = useState(2.5);\n  const [connectionTries, setConnectionTries] = useState(0);\n\n  const send = useCallback(\n    (data: Record<string, string | number | string[]>) => {\n      if (!ws.current) return;\n      if (ws.current.readyState !== ws.current.OPEN) return;\n      ws.current.send(JSON.stringify(data));\n    },\n    []\n  );\n\n  // Connect to the websocket, and clean up when we're done\n  useEffect(() => {\n    ws.current = new WebSocket(\"wss://www.cryptofacilities.com/ws/v1\");\n    setIsConnecting(true);\n\n    ws.current.addEventListener(\"open\", () => {\n      setIsConnected(true);\n      setIsConnecting(false);\n    });\n\n    ws.current.addEventListener(\"close\", () => {\n      setIsConnected(false);\n      setIsConnecting(false);\n    });\n\n    return () => {\n      ws.current?.close();\n    };\n  }, [connectionTries]);\n\n  // Incrementing connectionTries triggers websocket reconnect\n  const reconnect = useCallback(() => {\n    setConnectionTries((t) => t + 1);\n  }, []);\n\n  // Send subscribe whenever we connect or change our subscribed products\n  useEffect(() => {\n    if (!isConnected || !ws.current) {\n      return;\n    }\n\n    // Dump the old order book\n    setOrderBook({ asks: [], bids: [] });\n\n    // Start subscribing to new orders\n    send({\n      event: \"subscribe\",\n      feed: \"book_ui_1\",\n      product_ids: [product],\n    });\n\n    // Listen for incoming orders\n    const onMessage = (ev: MessageEvent) => {\n      try {\n        const data: OrderBookUpdate = JSON.parse(ev.data);\n        if (!data.bids && !data.asks) {\n          return;\n        }\n\n        setOrderBook((prevOrders) => addOrderUpdateToBook(prevOrders, data));\n      } catch (err) {\n        console.error(\"Received unparseable message\", ev.data, err);\n      }\n    };\n    ws.current.addEventListener(\"message\", onMessage);\n    return () => ws.current?.removeEventListener(\"message\", onMessage);\n  }, [isConnected, product, send]);\n\n  // Clump the order book into specified price groupings and send that out instead\n  useEffect(() => {\n    setGroupedOrderBook(groupOrderBookPrices(orderBook, groupSize));\n  }, [orderBook, groupSize]);\n\n  // Memoize the value to prevent unnecessary re-renders\n  const value = useMemo<OrderBookState>(\n    () => ({\n      isConnecting,\n      isConnected,\n      orderBook: groupedOrderBook,\n      product,\n      groupSize,\n      reconnect,\n      setProduct,\n      setGroupSize,\n    }),\n    [isConnecting, isConnected, groupedOrderBook, product, groupSize, reconnect]\n  );\n\n  return (\n    <OrderBookContext.Provider value={value}>\n      {children}\n    </OrderBookContext.Provider>\n  );\n};\n","export function commafy(str: string | number): string {\n  return str.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n}\n","import { makeStyles, TableCell, TableRow } from \"@material-ui/core\";\nimport { green, red } from \"@material-ui/core/colors\";\nimport React, { useMemo } from \"react\";\nimport { OrderBookOrder } from \"../types/orders\";\nimport { commafy } from \"../util/format\";\n\nconst NUM_ROWS = 6;\n\ninterface OrderRowsProps {\n  orderType: \"bid\" | \"ask\";\n  orders: OrderBookOrder[];\n}\n\nexport const OrderRows: React.FC<OrderRowsProps> = ({ orderType, orders }) => {\n  const styles = useStyles();\n\n  const sortedOrders = useMemo(() => {\n    const sorted = [...orders].sort((a, b) => {\n      return orderType === \"bid\" ? b.price - a.price : a.price - b.price;\n    });\n    const sliced = sorted.slice(0, NUM_ROWS);\n    if (orderType === \"ask\") {\n      sliced.reverse();\n    }\n    return sliced;\n  }, [orders, orderType]);\n\n  // Bids count \"down\", asks count \"up\"\n  let quantityCounter = orderType === \"bid\" ? 0 : sortedOrders.reduce((prev, o) => prev += o.quantity, 0) ;\n\n  return (\n    <>\n      {sortedOrders.map((o) => {\n        quantityCounter = orderType === \"bid\" ? quantityCounter + o.quantity : quantityCounter - o.quantity;\n        return (\n          <TableRow key={`${orderType}-${o.price}-${o.quantity}`} className={`${styles.row} ${orderType}`}>\n            <TableCell>{commafy(o.price)}</TableCell>\n            <TableCell>{commafy(o.quantity)}</TableCell>\n            <TableCell>{commafy(quantityCounter + (orderType === \"bid\" ? 0 : o.quantity))}</TableCell>\n          </TableRow>\n        );\n      })}\n      {!sortedOrders.length && (\n        <TableRow>\n          <TableCell colSpan={3}>\n            No {orderType} orders\n          </TableCell>\n        </TableRow>\n      )}\n    </>\n  );\n};\n\nconst useStyles = makeStyles({\n  row: {\n    \"&.bid .MuiTableCell-root\": {\n      color: green[500],\n    },\n\n    \"&.ask .MuiTableCell-root\": {\n      color: red[500],\n    },\n\n    \"&:hover\": {\n      background: \"rgba(255, 255, 255, 0.05)\",\n      \"& .MuiTableCell-root:first-child\": {\n        fontWeight: 600,\n      },\n    },\n  },\n})\n","import React from \"react\";\nimport { TableRow, TableCell, makeStyles, ButtonBase } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport { useOrderBookContext } from \"../contexts/OrderBook\";\n\nconst GROUP_SIZES = [0.5, 1.0, 2.5, 5.0, 10.0, 25.0, 50.0, 100.0, 1000.0];\n\nexport const OrderBookTableControls = () => {\n  const styles = useStyles();\n  const { orderBook, groupSize, setGroupSize } = useOrderBookContext();\n\n  const groupSizeIndex = GROUP_SIZES.indexOf(groupSize);\n  const spread =\n    orderBook.asks.reduce((lo, o) => Math.min(lo, o.price), Infinity) -\n    orderBook.bids.reduce((hi, o) => Math.max(hi, o.price), 0);\n\n\n  return (\n    <TableRow>\n      <TableCell colSpan={3}>\n        <div className={styles.cell}>\n          <div className={`${styles.section} ${styles.spread}`}>\n            Spread: {spread === Infinity ? \"N/A\" : spread}\n          </div>\n          <div className={styles.section}>\n            <span>Group: {groupSize}</span>\n            <ButtonBase\n              disabled={groupSize === GROUP_SIZES[0]}\n              className={styles.groupButton}\n              onClick={() => setGroupSize(GROUP_SIZES[groupSizeIndex - 1])}\n            >\n              <RemoveIcon />\n            </ButtonBase>\n            <ButtonBase\n              disabled={groupSize === GROUP_SIZES[GROUP_SIZES.length - 1]}\n              className={styles.groupButton}\n              onClick={() => setGroupSize(GROUP_SIZES[groupSizeIndex + 1])}\n            >\n              <AddIcon />\n            </ButtonBase>\n          </div>\n        </div>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  cell: {\n    display: \"flex\",\n    alignItems: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  section: {\n    display: \"flex\",\n    alignItems: \"center\",\n    paddingRight: theme.spacing(4),\n    \"&:last-child\": {\n      paddingRight: 0,\n    },\n    \"& > span\": {\n      marginRight: theme.spacing(2),\n    },\n  },\n  spread: {\n    minWidth: 140,\n  },\n  groupButton: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: 32,\n    height: 32,\n    borderRadius: \"100%\",\n\n    \"& .MuiSvgIcon-root\": {\n      fontSize: 16,\n    },\n  },\n}));\n","import {\n  Box,\n  Button,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useOrderBookContext } from \"../contexts/OrderBook\";\nimport { OrderRows } from \"./OrderRows\";\nimport { OrderBookTableControls } from \"./OrderBookTableControls\";\n\nexport const OrderBookTable: React.FC = () => {\n  const {\n    orderBook,\n    product,\n    isConnecting,\n    isConnected,\n    reconnect,\n  } = useOrderBookContext();\n  const { asks, bids } = orderBook;\n\n  let content: React.ReactNode;\n  if (isConnecting) {\n    content = (\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        height={600}\n      >\n        <CircularProgress />\n      </Box>\n    );\n  } else if (!isConnected) {\n    content = (\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        flexDirection=\"column\"\n        height={600}\n      >\n        <Typography variant=\"h6\">Connection failed</Typography>\n        <Box m={1}>\n          <Button variant=\"outlined\" onClick={reconnect}>\n            Try again\n          </Button>\n        </Box>\n      </Box>\n    );\n  } else {\n    content = (\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Price</TableCell>\n            <TableCell>Size</TableCell>\n            <TableCell>Total</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <OrderRows orderType=\"ask\" orders={asks} />\n          <OrderBookTableControls />\n          <OrderRows orderType=\"bid\" orders={bids} />\n        </TableBody>\n      </Table>\n    );\n  }\n\n  return (\n    <>\n      <Typography variant=\"h3\">{product}</Typography>\n      <Box mb={2} />\n      <TableContainer component={Paper}>{content}</TableContainer>\n    </>\n  );\n};\n","import { makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { OrderBookTable } from \"./components/OrderBookTable\";\nimport { OrderBookProvider } from \"./contexts/OrderBook\";\n\nexport const App: React.FC = () => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.app}>\n      <div className={styles.inner}>\n        <OrderBookProvider>\n          <OrderBookTable />\n        </OrderBookProvider>\n      </div>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles(theme => ({\n  app: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    minHeight: \"100vh\",\n    padding: theme.spacing(4),\n  },\n  inner: {\n    width: \"100%\",\n    maxWidth: 980,\n  },\n}));\n","import { createMuiTheme } from \"@material-ui/core\";\n\nconst PTMono = {\n  fontFamily: \"PTMono\",\n  fontStyle: \"normal\",\n  fontDisplay: \"swap\",\n  fontWeight: 400,\n  src: `\n    local('PTMono'),\n    local('PTMono-Regular'),\n    url('/fonts/PTMono-Regular.ttf') format('ttf')\n  `,\n} as const;\n\nexport const theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n  typography: {\n    fontFamily: \"PTMono, monospace\",\n  },\n  overrides: {\n    MuiCssBaseline: {\n      \"@global\": {\n        \"@font-face\": [PTMono],\n      },\n    },\n  },\n});\n","import { CssBaseline, ThemeProvider } from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { theme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}